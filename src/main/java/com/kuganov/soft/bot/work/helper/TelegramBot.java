package com.kuganov.soft.bot.work.helper;

import jakarta.annotation.PreDestroy;
import java.net.InetAddress;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Component
@Slf4j
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final String hostIp;
    private String chatId;
    private boolean monitoringEnabled = false;
    private boolean lastConnectionStatus = false;
    private final ScheduledExecutorService executorService;

    public TelegramBot(BotConfig botConfig) {
        super(botConfig.getToken());
        this.botConfig = botConfig;
        this.hostIp = botConfig.getHostIp();
        this.executorService = Executors.newSingleThreadScheduledExecutor();
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            this.chatId = update.getMessage().getChatId().toString();
            String messageText = update.getMessage().getText();

            switch (messageText) {
                case "/help" -> sendHelpMessage();
                case "/start" -> startMonitoring();
                case "/stop" -> stopMonitoring();
                case "/status" -> sendCurrentStatus();
                default -> sendMessage("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /stop, /status, /help");
            }
        }
    }

    private void startMonitoring() {
        if (monitoringEnabled) {
            sendMessage("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
            return;
        }

        monitoringEnabled = true;
        sendMessage("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω. IP: " + hostIp);

        executorService.scheduleAtFixedRate(this::checkConnection, 0, 5, TimeUnit.SECONDS);
    }

    private void stopMonitoring() {
        if (!monitoringEnabled) {
            sendMessage("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω");
            return;
        }

        monitoringEnabled = false;
        sendMessage("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    private void checkConnection() {
        if (!monitoringEnabled || chatId == null) return;

        try {
            boolean currentStatus = InetAddress.getByName(hostIp).isReachable(5000);

            if (currentStatus != lastConnectionStatus) {
                if (currentStatus) {
                    sendMessage("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ü–ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
                    log.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
                } else {
                    sendMessage("‚ö†Ô∏è –ü–ö —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
                    log.warn("–ü–ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                }
                lastConnectionStatus = currentStatus;
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    private void sendCurrentStatus() {
        try {
            boolean currentStatus = InetAddress.getByName(hostIp).isReachable(5000);
            sendMessage(currentStatus ? "üü¢ –ü–ö –¥–æ—Å—Ç—É–ø–µ–Ω" : "üî¥ –ü–ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        } catch (Exception e) {
            sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: " + e.getMessage());
        }
    }

    private void sendHelpMessage() {
        String helpText = """
        ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:
        /start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        /status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        
        –¢–µ–∫—É—â–∏–π IP –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %s
        """.formatted(hostIp);
        sendMessage(helpText);
    }

    private void sendMessage(String text) {
        if (chatId == null) return;

        SendMessage message = new SendMessage(chatId, text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    @PreDestroy
    public void cleanup() {
        executorService.shutdownNow();
    }
}


